<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Network Configuration Impact Analyzer</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1800px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header h1 {
            color: white;
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            color: rgba(255, 255, 255, 0.9);
            font-size: 1.1em;
        }

        .control-panel {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .config-section {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .config-section h3 {
            color: #4a5568;
            margin-bottom: 15px;
            font-size: 1.3em;
            border-bottom: 2px solid #667eea;
            padding-bottom: 10px;
        }

        .config-textarea {
            width: 100%;
            height: 200px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            resize: vertical;
            transition: border-color 0.3s ease;
        }

        .config-textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .button-group {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin: 20px 0;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: linear-gradient(45deg, #f093fb, #f5576c);
            color: white;
            box-shadow: 0 4px 15px rgba(245, 87, 108, 0.3);
        }

        .btn-secondary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(245, 87, 108, 0.4);
        }

        .visualization-container {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        .network-map {
            width: 100%;
            height: 600px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            background: #f8fafc;
        }

        .impact-panel {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .impact-section {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }

        .impact-section h3 {
            color: #4a5568;
            margin-bottom: 15px;
            font-size: 1.2em;
            border-bottom: 2px solid #f093fb;
            padding-bottom: 10px;
        }

        .impact-list {
            list-style: none;
            padding: 0;
        }

        .impact-item {
            background: #f7fafc;
            margin: 10px 0;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #667eea;
            transition: all 0.3s ease;
        }

        .impact-item:hover {
            background: #edf2f7;
            transform: translateX(5px);
        }

        .impact-item.critical {
            border-left-color: #e53e3e;
            background: #fed7d7;
        }

        .impact-item.warning {
            border-left-color: #d69e2e;
            background: #fefcbf;
        }

        .impact-item.info {
            border-left-color: #3182ce;
            background: #bee3f8;
        }

        .device-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .device-name {
            font-weight: bold;
            color: #2d3748;
        }

        .device-type {
            background: #667eea;
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
        }

        .path-analysis {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        .path-step {
            display: flex;
            align-items: center;
            padding: 15px;
            margin: 10px 0;
            background: #f8fafc;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }

        .step-number {
            background: #667eea;
            color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 15px;
        }

        .step-details {
            flex: 1;
        }

        .step-title {
            font-weight: bold;
            color: #2d3748;
            margin-bottom: 5px;
        }

        .step-description {
            color: #4a5568;
            font-size: 14px;
        }

        .latency-info {
            background: #e6fffa;
            padding: 8px 12px;
            border-radius: 6px;
            margin-left: auto;
            font-size: 12px;
            color: #00504a;
        }

        .legend {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-top: 20px;
            flex-wrap: wrap;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
            background: rgba(255, 255, 255, 0.9);
            padding: 8px 15px;
            border-radius: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .legend-color {
            width: 20px;
            height: 20px;
            border-radius: 50%;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }

        .status-ok { background: #48bb78; }
        .status-warning { background: #ed8936; }
        .status-critical { background: #e53e3e; }

        .tooltip {
            position: absolute;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
            pointer-events: none;
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .network-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }

        .stat-value {
            font-size: 2.5em;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 10px;
        }

        .stat-label {
            color: #4a5568;
            font-size: 1.1em;
        }

        @media (max-width: 768px) {
            .control-panel {
                grid-template-columns: 1fr;
            }
            
            .impact-panel {
                grid-template-columns: 1fr;
            }
            
            .network-stats {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üåê Network Configuration Impact Analyzer</h1>
            <p>Advanced Network Modeling with Hop-by-Hop Path Analysis</p>
        </div>

        <div class="control-panel">
            <div class="config-section">
                <h3>üìù Current Network Configuration</h3>
                <textarea class="config-textarea" id="currentConfig" placeholder="Paste your current Cisco/Juniper configuration here...

Example Cisco Configuration:
router bgp 65001
 bgp router-id 10.0.1.1
 neighbor 10.0.1.2 remote-as 65002
 neighbor 10.0.1.2 description R2-Connection
 address-family ipv4
  network 192.168.1.0 mask 255.255.255.0
  neighbor 10.0.1.2 activate

interface GigabitEthernet0/0
 ip address 10.0.1.1 255.255.255.0
 no shutdown

ip route 0.0.0.0 0.0.0.0 10.0.1.2"></textarea>
            </div>

            <div class="config-section">
                <h3>üîß New Configuration Changes</h3>
                <textarea class="config-textarea" id="newConfig" placeholder="Enter your new configuration changes here...

Example New Configuration:
router bgp 65001
 address-family ipv4
  network 192.168.2.0 mask 255.255.255.0
  
route-map SET_COMMUNITY permit 10
 set community 65001:100
 
ip prefix-list ALLOW_NETWORKS seq 5 permit 192.168.1.0/24
ip prefix-list ALLOW_NETWORKS seq 10 permit 192.168.2.0/24

router bgp 65001
 address-family ipv4
  neighbor 10.0.1.2 route-map SET_COMMUNITY out
  neighbor 10.0.1.2 prefix-list ALLOW_NETWORKS out"></textarea>
            </div>
        </div>

        <div class="button-group">
            <button class="btn btn-primary" onclick="analyzeConfiguration()">
                üîç Analyze Configuration Impact
            </button>
            <button class="btn btn-secondary" onclick="generateSampleData()">
                üìä Load Sample Network
            </button>
            <button class="btn btn-primary" onclick="runPathAnalysis()">
                üó∫Ô∏è Run Path Analysis
            </button>
        </div>

        <div class="network-stats">
            <div class="stat-card">
                <div class="stat-value" id="deviceCount">0</div>
                <div class="stat-label">Network Devices</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="pathCount">0</div>
                <div class="stat-label">Active Paths</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="impactCount">0</div>
                <div class="stat-label">Configuration Impacts</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="avgLatency">0ms</div>
                <div class="stat-label">Average Latency</div>
            </div>
        </div>

        <div class="visualization-container">
            <h3>üó∫Ô∏è Network Topology & Path Visualization</h3>
            <svg class="network-map" id="networkMap"></svg>
            
            <div class="legend">
                <div class="legend-item">
                    <div class="legend-color" style="background: #667eea;"></div>
                    <span>Router</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: #f093fb;"></div>
                    <span>Firewall</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: #48bb78;"></div>
                    <span>Active Path</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: #e53e3e;"></div>
                    <span>Critical Issue</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: #ed8936;"></div>
                    <span>Warning</span>
                </div>
            </div>
        </div>

        <div class="impact-panel">
            <div class="impact-section">
                <h3>‚ö†Ô∏è Configuration Impact Analysis</h3>
                <ul class="impact-list" id="impactList"></ul>
            </div>

            <div class="impact-section">
                <h3>üìä Affected Devices</h3>
                <ul class="impact-list" id="deviceList"></ul>
            </div>
        </div>

        <div class="path-analysis">
            <h3>üîç Hop-by-Hop Path Analysis</h3>
            <div id="pathSteps"></div>
        </div>
    </div>

    <div class="tooltip" id="tooltip"></div>

    <script>
        // Network data structure
        let networkData = {
            devices: [],
            connections: [],
            paths: [],
            impacts: []
        };

        // Configuration parsers
        class ConfigParser {
            static parseCiscoConfig(config) {
                const devices = [];
                const connections = [];
                const routes = [];
                
                const lines = config.split('\n');
                let currentDevice = null;
                let currentInterface = null;
                
                lines.forEach(line => {
                    line = line.trim();
                    
                    if (line.startsWith('hostname ')) {
                        currentDevice = {
                            name: line.split(' ')[1],
                            type: 'router',
                            vendor: 'cisco',
                            interfaces: [],
                            bgp: null,
                            routes: []
                        };
                        devices.push(currentDevice);
                    }
                    
                    if (line.startsWith('router bgp ')) {
                        if (currentDevice) {
                            currentDevice.bgp = {
                                asn: parseInt(line.split(' ')[2]),
                                neighbors: []
                            };
                        }
                    }
                    
                    if (line.startsWith('neighbor ') && line.includes('remote-as')) {
                        if (currentDevice && currentDevice.bgp) {
                            const parts = line.split(' ');
                            const neighbor = parts[1];
                            const remoteAs = parseInt(parts[3]);
                            currentDevice.bgp.neighbors.push({
                                ip: neighbor,
                                remoteAs: remoteAs
                            });
                        }
                    }
                    
                    if (line.startsWith('interface ')) {
                        currentInterface = {
                            name: line.substring(10),
                            ip: null,
                            subnet: null,
                            status: 'up'
                        };
                        if (currentDevice) {
                            currentDevice.interfaces.push(currentInterface);
                        }
                    }
                    
                    if (line.startsWith('ip address ') && currentInterface) {
                        const parts = line.split(' ');
                        currentInterface.ip = parts[2];
                        currentInterface.subnet = parts[3];
                    }
                    
                    if (line.startsWith('ip route ')) {
                        const parts = line.split(' ');
                        routes.push({
                            network: parts[2],
                            mask: parts[3],
                            nextHop: parts[4],
                            device: currentDevice ? currentDevice.name : 'unknown'
                        });
                    }
                });
                
                return { devices, connections, routes };
            }
            
            static parseJuniperConfig(config) {
                const devices = [];
                const connections = [];
                const routes = [];
                
                // Simplified Juniper parser
                const lines = config.split('\n');
                let currentDevice = {
                    name: 'SRX-FW',
                    type: 'firewall',
                    vendor: 'juniper',
                    interfaces: [],
                    policies: []
                };
                
                devices.push(currentDevice);
                
                lines.forEach(line => {
                    line = line.trim();
                    
                    if (line.includes('set interfaces')) {
                        const match = line.match(/set interfaces (\S+) unit \d+ family inet address (\S+)/);
                        if (match) {
                            currentDevice.interfaces.push({
                                name: match[1],
                                ip: match[2].split('/')[0],
                                subnet: match[2],
                                status: 'up'
                            });
                        }
                    }
                    
                    if (line.includes('set security policies')) {
                        currentDevice.policies.push({
                            rule: line.substring(line.indexOf('policies') + 9),
                            action: line.includes('permit') ? 'permit' : 'deny'
                        });
                    }
                });
                
                return { devices, connections, routes };
            }
        }

        // Network analyzer
        class NetworkAnalyzer {
            static analyzeImpact(currentConfig, newConfig) {
                const impacts = [];
                
                // Parse both configurations
                const current = this.parseConfiguration(currentConfig);
                const newCfg = this.parseConfiguration(newConfig);
                
                // Analyze routing table changes
                const routingImpacts = this.analyzeRoutingChanges(current, newCfg);
                impacts.push(...routingImpacts);
                
                // Analyze BGP changes
                const bgpImpacts = this.analyzeBGPChanges(current, newCfg);
                impacts.push(...bgpImpacts);
                
                // Analyze policy changes
                const policyImpacts = this.analyzePolicyChanges(current, newCfg);
                impacts.push(...policyImpacts);
                
                return impacts;
            }
            
            static parseConfiguration(config) {
                if (config.includes('router bgp') || config.includes('interface GigabitEthernet')) {
                    return ConfigParser.parseCiscoConfig(config);
                } else if (config.includes('set interfaces') || config.includes('set security')) {
                    return ConfigParser.parseJuniperConfig(config);
                }
                return { devices: [], connections: [], routes: [] };
            }
            
            static analyzeRoutingChanges(current, newCfg) {
                const impacts = [];
                
                // Check for new routes
                newCfg.routes.forEach(route => {
                    const exists = current.routes.some(r => 
                        r.network === route.network && r.mask === route.mask
                    );
                    
                    if (!exists) {
                        impacts.push({
                            type: 'info',
                            category: 'routing',
                            message: `New route added: ${route.network}/${route.mask} via ${route.nextHop}`,
                            affectedDevices: [route.device],
                            severity: 'low'
                        });
                    }
                });
                
                return impacts;
            }
            
            static analyzeBGPChanges(current, newCfg) {
                const impacts = [];
                
                // Check for new BGP configurations
                newCfg.devices.forEach(device => {
                    if (device.bgp) {
                        const currentDevice = current.devices.find(d => d.name === device.name);
                        
                        if (!currentDevice || !currentDevice.bgp) {
                            impacts.push({
                                type: 'warning',
                                category: 'bgp',
                                message: `New BGP configuration on ${device.name} (AS${device.bgp.asn})`,
                                affectedDevices: [device.name],
                                severity: 'medium'
                            });
                        } else {
                            // Check for new neighbors
                            device.bgp.neighbors.forEach(neighbor => {
                                const exists = currentDevice.bgp.neighbors.some(n => 
                                    n.ip === neighbor.ip
                                );
                                
                                if (!exists) {
                                    impacts.push({
                                        type: 'info',
                                        category: 'bgp',
                                        message: `New BGP neighbor ${neighbor.ip} (AS${neighbor.remoteAs}) on ${device.name}`,
                                        affectedDevices: [device.name],
                                        severity: 'low'
                                    });
                                }
                            });
                        }
                    }
                });
                
                return impacts;
            }
            
            static analyzePolicyChanges(current, newCfg) {
                const impacts = [];
                
                // Check for route-map, prefix-list, and community changes
                const configText = document.getElementById('newConfig').value;
                
                if (configText.includes('route-map')) {
                    impacts.push({
                        type: 'warning',
                        category: 'policy',
                        message: 'Route-map configuration detected - may affect routing decisions',
                        affectedDevices: ['All BGP speakers'],
                        severity: 'medium'
                    });
                }
                
                if (configText.includes('prefix-list')) {
                    impacts.push({
                        type: 'warning',
                        category: 'policy',
                        message: 'Prefix-list configuration detected - may filter routing advertisements',
                        affectedDevices: ['BGP neighbors'],
                        severity: 'medium'
                    });
                }
                
                if (configText.includes('community')) {
                    impacts.push({
                        type: 'info',
                        category: 'policy',
                        message: 'BGP community configuration detected - may affect route selection',
                        affectedDevices: ['BGP neighbors'],
                        severity: 'low'
                    });
                }
                
                return impacts;
            }
        }

        // Network visualization
        class NetworkVisualizer {
            constructor(containerId) {
                this.container = d3.select(containerId);
                this.width = 1200;
                this.height = 600;
                this.svg = this.container
                    .attr('width', this.width)
                    .attr('height', this.height);
                
                this.tooltip = d3.select('#tooltip');
                this.simulation = null;
            }
            
            render(data) {
                this.svg.selectAll('*').remove();
                
                // Create force simulation
                this.simulation = d3.forceSimulation(data.devices)
                    .force('link', d3.forceLink(data.connections).id(d => d.name).distance(150))
                    .force('charge', d3.forceManyBody().strength(-300))
                    .force('center', d3.forceCenter(this.width / 2, this.height / 2))
                    .force('collision', d3.forceCollide().radius(50));
                
                // Create links
                const links = this.svg.selectAll('.link')
                    .data(data.connections)
                    .enter()
                    .append('line')
                    .attr('class', 'link')
                    .style('stroke', d => d.status === 'critical' ? '#e53e3e' : '#48bb78')
                    .style('stroke-width', d => d.status === 'critical' ? 4 : 2)
                    .style('opacity', 0.8);
                
                // Create device nodes
                const nodes = this.svg.selectAll('.node')
                    .data(data.devices)
                    .enter()
                    .append('g')
                    .attr('class', 'node')
                    .call(d3.drag()
                        .on('start', this.dragstarted.bind(this))
                        .on('drag', this.dragged.bind(this))
                        .on('end', this.dragended.bind(this)));
                
                // Add device circles
                nodes.append('circle')
                    .attr('r', d => d.type === 'firewall' ? 25 : 20)
                    .style('fill', d => this.getDeviceColor(d))
                    .style('stroke', '#fff')
                    .style('stroke-width', 3)
                    .style('cursor', 'pointer');
                
                // Add device labels
                nodes.append('text')
                    .attr('dy', -30)
                    .attr('text-anchor', 'middle')
                    .style('font-size', '12px')
                    .style('font-weight', 'bold')
                    .style('fill', '#2d3748')
                    .text(d => d.name);
                
                // Add device type labels
                nodes.append('text')
                    .attr('dy', 35)
                    .attr('text-anchor', 'middle')
                    .style('font-size', '10px')
                    .style('fill', '#4a5568')
                    .text(d => d.type.toUpperCase());
                
                // Add hover effects
                nodes.on('mouseover', (event, d) => {
                    this.showTooltip(event, d);
                })
                .on('mouseout', () => {
                    this.hideTooltip();
                });
                
                // Update positions on tick
                this.simulation.on('tick', () => {
                    links
                        .attr('x1', d => d.source.x)
                        .attr('y1', d => d.source.y)
                        .attr('x2', d => d.target.x)
                        .attr('y2', d => d.target.y);
                    
                    nodes
                        .attr('transform', d => `translate(${d.x},${d.y})`);
                });
                
                // Add path animation
                this.animatePaths(data.paths);
            }
            
            getDeviceColor(device) {
                if (device.type === 'firewall') return '#f093fb';
                if (device.type === 'router') return '#667eea';
                return '#48bb78';
            }
            
            showTooltip(event, device) {
                const tooltip = this.tooltip;
                const content = `
                    <strong>${device.name}</strong><br>
                    Type: ${device.type}<br>
                    Vendor: ${device.vendor}<br>
                    Interfaces: ${device.interfaces ? device.interfaces.length : 0}<br>
                    Status: ${device.status || 'Active'}
                `;
                
                tooltip.html(content)
                    .style('left', (event.pageX + 10) + 'px')
                    .style('top', (event.pageY - 10) + 'px')
                    .style('opacity', 1);
            }
            
            hideTooltip() {
                this.tooltip.style('opacity', 0);
            }
            
            animatePaths(paths) {
                paths.forEach((path, index) => {
                    setTimeout(() => {
                        this.animatePath(path);
                    }, index * 1000);
                });
            }
            
            animatePath(path) {
                const pathLine = this.svg.append('line')
                    .attr('class', 'path-animation')
                    .style('stroke', '#ffd700')
