<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multi-Cloud Maintenance Automation System - Preview</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 300;
        }

        .header p {
            font-size: 1.2em;
            opacity: 0.9;
        }

        .dashboard {
            padding: 30px;
        }

        .tabs {
            display: flex;
            border-bottom: 2px solid #ecf0f1;
            margin-bottom: 30px;
        }

        .tab {
            padding: 15px 30px;
            cursor: pointer;
            border: none;
            background: none;
            font-size: 16px;
            color: #7f8c8d;
            border-bottom: 3px solid transparent;
            transition: all 0.3s ease;
        }

        .tab.active {
            color: #3498db;
            border-bottom-color: #3498db;
        }

        .tab:hover {
            background: #f8f9fa;
        }

        .tab-content {
            display: none;
            animation: fadeIn 0.5s ease;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            border: 1px solid #ecf0f1;
        }

        .card h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.3em;
        }

        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .status-card {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            transition: transform 0.3s ease;
        }

        .status-card:hover {
            transform: translateY(-5px);
        }

        .status-number {
            font-size: 2.5em;
            font-weight: bold;
            color: #3498db;
            margin-bottom: 10px;
        }

        .status-label {
            color: #7f8c8d;
            font-size: 1.1em;
        }

        .provider-badge {
            display: inline-block;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: bold;
            margin-right: 10px;
            margin-bottom: 10px;
        }

        .aws { background: #ff9900; color: white; }
        .gcp { background: #4285f4; color: white; }
        .azure { background: #0078d4; color: white; }
        .oracle { background: #f80000; color: white; }

        .event-item {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 15px;
            border-left: 4px solid #3498db;
        }

        .event-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .event-title {
            font-weight: bold;
            color: #2c3e50;
        }

        .event-time {
            color: #7f8c8d;
            font-size: 0.9em;
        }

        .event-description {
            color: #34495e;
            line-height: 1.6;
        }

        .connectivity-status {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .status-up { background: #27ae60; }
        .status-down { background: #e74c3c; }
        .status-warning { background: #f39c12; }

        .btn {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(52, 152, 219, 0.3);
        }

        .btn-success {
            background: linear-gradient(135deg, #27ae60, #229954);
        }

        .btn-warning {
            background: linear-gradient(135deg, #f39c12, #e67e22);
        }

        .btn-danger {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
        }

        .log-entry {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 15px;
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            line-height: 1.4;
            margin-bottom: 10px;
            max-height: 400px;
            overflow-y: auto;
        }

        .timestamp {
            color: #3498db;
        }

        .log-info { color: #27ae60; }
        .log-warning { color: #f39c12; }
        .log-error { color: #e74c3c; }

        .email-preview {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .email-header {
            border-bottom: 1px solid #dee2e6;
            padding-bottom: 15px;
            margin-bottom: 15px;
        }

        .email-field {
            margin-bottom: 10px;
        }

        .email-field strong {
            color: #2c3e50;
        }

        .simulation-controls {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #2c3e50;
        }

        .form-group select,
        .form-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }

        .running-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            background: #27ae60;
            border-radius: 50%;
            margin-right: 10px;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Multi-Cloud Maintenance Automation System</h1>
            <p>Automated maintenance notification and change management for AWS, GCP, Azure, and Oracle Cloud</p>
        </div>

        <div class="dashboard">
            <div class="tabs">
                <button class="tab active" onclick="showTab('overview')">Overview</button>
                <button class="tab" onclick="showTab('events')">Maintenance Events</button>
                <button class="tab" onclick="showTab('connectivity')">Connectivity Status</button>
                <button class="tab" onclick="showTab('tickets')">Change Tickets</button>
                <button class="tab" onclick="showTab('notifications')">Email Notifications</button>
                <button class="tab" onclick="showTab('logs')">System Logs</button>
                <button class="tab" onclick="showTab('simulation')">Simulation</button>
            </div>

            <!-- Overview Tab -->
            <div id="overview" class="tab-content active">
                <div class="status-grid">
                    <div class="status-card">
                        <div class="status-number" id="activeEvents">3</div>
                        <div class="status-label">Active Events</div>
                    </div>
                    <div class="status-card">
                        <div class="status-number" id="openTickets">2</div>
                        <div class="status-label">Open Tickets</div>
                    </div>
                    <div class="status-card">
                        <div class="status-number" id="connectivityUp">8</div>
                        <div class="status-label">Connections Up</div>
                    </div>
                    <div class="status-card">
                        <div class="status-number" id="lastRun">2min</div>
                        <div class="status-label">Last Check</div>
                    </div>
                </div>

                <div class="card">
                    <h3><span class="running-indicator"></span>System Status</h3>
                    <p>The automation system is running and monitoring maintenance events across all configured cloud providers.</p>
                    <br>
                    <div>
                        <span class="provider-badge aws">AWS</span>
                        <span class="provider-badge gcp">GCP</span>
                        <span class="provider-badge azure">Azure</span>
                        <span class="provider-badge oracle">Oracle</span>
                    </div>
                    <br>
                    <button class="btn" onclick="runSystemCheck()">Run System Check</button>
                    <button class="btn btn-success" onclick="generateReport()">Generate Report</button>
                </div>
            </div>

            <!-- Events Tab -->
            <div id="events" class="tab-content">
                <div class="card">
                    <h3>Upcoming Maintenance Events</h3>
                    <div id="eventsList">
                        <!-- Events will be populated here -->
                    </div>
                </div>
            </div>

            <!-- Connectivity Tab -->
            <div id="connectivity" class="tab-content">
                <div class="card">
                    <h3>Connectivity Status</h3>
                    <div id="connectivityList">
                        <!-- Connectivity status will be populated here -->
                    </div>
                </div>
            </div>

            <!-- Tickets Tab -->
            <div id="tickets" class="tab-content">
                <div class="card">
                    <h3>Change Tickets</h3>
                    <div id="ticketsList">
                        <!-- Tickets will be populated here -->
                    </div>
                </div>
            </div>

            <!-- Notifications Tab -->
            <div id="notifications" class="tab-content">
                <div class="card">
                    <h3>Email Notifications</h3>
                    <div id="emailPreview">
                        <!-- Email previews will be shown here -->
                    </div>
                </div>
            </div>

            <!-- Logs Tab -->
            <div id="logs" class="tab-content">
                <div class="card">
                    <h3>System Logs</h3>
                    <div class="log-entry" id="logContainer">
                        <!-- Logs will be populated here -->
                    </div>
                </div>
            </div>

            <!-- Simulation Tab -->
            <div id="simulation" class="tab-content">
                <div class="card">
                    <h3>Simulation Controls</h3>
                    <div class="simulation-controls">
                        <div class="form-group">
                            <label>Cloud Provider:</label>
                            <select id="simProvider">
                                <option value="aws">AWS</option>
                                <option value="gcp">GCP</option>
                                <option value="azure">Azure</option>
                                <option value="oracle">Oracle</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Maintenance Type:</label>
                            <select id="simType">
                                <option value="scheduledChange">Scheduled Change</option>
                                <option value="emergency">Emergency Maintenance</option>
                                <option value="patch">Security Patch</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Service:</label>
                            <input type="text" id="simService" placeholder="e.g., EC2, Compute Engine" />
                        </div>
                        <button class="btn btn-warning" onclick="simulateMaintenanceEvent()">Simulate Maintenance Event</button>
                        <button class="btn btn-success" onclick="simulateCompletion()">Simulate Completion</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Sample data
        const sampleEvents = [
            {
                id: 'aws-001',
                provider: 'aws',
                service: 'EC2',
                description: 'Scheduled maintenance for EC2 instances in us-east-1',
                startTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000),
                endTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000 + 4 * 60 * 60 * 1000),
                region: 'us-east-1',
                impactLevel: 'medium'
            },
            {
                id: 'gcp-002',
                provider: 'gcp',
                service: 'Compute Engine',
                description: 'Network infrastructure maintenance',
                startTime: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),
                endTime: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000 + 2 * 60 * 60 * 1000),
                region: 'us-central1',
                impactLevel: 'low'
            },
            {
                id: 'azure-003',
                provider: 'azure',
                service: 'Virtual Machines',
                description: 'Host maintenance for VM instances',
                startTime: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
                endTime: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000 + 6 * 60 * 60 * 1000),
                region: 'East US',
                impactLevel: 'high'
            }
        ];

        const sampleConnectivity = [
            { id: 'dxvif-123', provider: 'aws', type: 'Direct Connect VIF', status: 'available', bgpStatus: 'up' },
            { id: 'dxvif-456', provider: 'aws', type: 'Direct Connect VIF', status: 'available', bgpStatus: 'up' },
            { id: 'interconnect-1', provider: 'gcp', type: 'Cloud Interconnect', status: 'active', bgpStatus: 'established' },
            { id: 'interconnect-2', provider: 'gcp', type: 'Cloud Interconnect', status: 'active', bgpStatus: 'established' },
            { id: 'expressroute-1', provider: 'azure', type: 'ExpressRoute', status: 'enabled', bgpStatus: 'connected' },
            { id: 'expressroute-2', provider: 'azure', type: 'ExpressRoute', status: 'enabled', bgpStatus: 'connected' }
        ];

        const sampleTickets = [
            {
                id: 'CHG0001234',
                provider: 'aws',
                service: 'EC2',
                status: 'New',
                created: new Date(Date.now() - 2 * 60 * 60 * 1000),
                description: 'Scheduled maintenance for EC2 instances'
            },
            {
                id: 'CHG0001235',
                provider: 'gcp',
                service: 'Compute Engine',
                status: 'In Progress',
                created: new Date(Date.now() - 1 * 60 * 60 * 1000),
                description: 'Network infrastructure maintenance'
            }
        ];

        let systemLogs = [];

        function showTab(tabName) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });

            // Remove active class from all tabs
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });

            // Show selected tab content
            document.getElementById(tabName).classList.add('active');

            // Add active class to clicked tab
            event.target.classList.add('active');

            // Load data for the selected tab
            switch(tabName) {
                case 'events':
                    loadEvents();
                    break;
                case 'connectivity':
                    loadConnectivity();
                    break;
                case 'tickets':
                    loadTickets();
                    break;
                case 'notifications':
                    loadNotifications();
                    break;
                case 'logs':
                    loadLogs();
                    break;
            }
        }

        function loadEvents() {
            const eventsContainer = document.getElementById('eventsList');
            eventsContainer.innerHTML = '';

            sampleEvents.forEach(event => {
                const eventElement = document.createElement('div');
                eventElement.className = 'event-item';
                eventElement.innerHTML = `
                    <div class="event-header">
                        <div class="event-title">
                            <span class="provider-badge ${event.provider}">${event.provider.toUpperCase()}</span>
                            ${event.service} - ${event.description}
                        </div>
                        <div class="event-time">${event.startTime.toLocaleString()}</div>
                    </div>
                    <div class="event-description">
                        <strong>Region:</strong> ${event.region}<br>
                        <strong>Impact Level:</strong> ${event.impactLevel}<br>
                        <strong>Duration:</strong> ${Math.round((event.endTime - event.startTime) / (1000 * 60 * 60))} hours<br>
                        <strong>End Time:</strong> ${event.endTime.toLocaleString()}
                    </div>
                `;
                eventsContainer.appendChild(eventElement);
            });
        }

        function loadConnectivity() {
            const connectivityContainer = document.getElementById('connectivityList');
            connectivityContainer.innerHTML = '';

            sampleConnectivity.forEach(conn => {
                const statusClass = conn.bgpStatus === 'up' || conn.bgpStatus === 'established' || conn.bgpStatus === 'connected' ? 'status-up' : 'status-down';
                
                const connElement = document.createElement('div');
                connElement.className = 'connectivity-status';
                connElement.innerHTML = `
                    <div class="status-indicator ${statusClass}"></div>
                    <div>
                        <strong><span class="provider-badge ${conn.provider}">${conn.provider.toUpperCase()}</span>${conn.type}</strong><br>
                        <strong>ID:</strong> ${conn.id} | <strong>Status:</strong> ${conn.status} | <strong>BGP:</strong> ${conn.bgpStatus}
                    </div>
                `;
                connectivityContainer.appendChild(connElement);
            });
        }

        function loadTickets() {
            const ticketsContainer = document.getElementById('ticketsList');
            ticketsContainer.innerHTML = '';

            sampleTickets.forEach(ticket => {
                const ticketElement = document.createElement('div');
                ticketElement.className = 'event-item';
                ticketElement.innerHTML = `
                    <div class="event-header">
                        <div class="event-title">
                            <span class="provider-badge ${ticket.provider}">${ticket.provider.toUpperCase()}</span>
                            ${ticket.id} - ${ticket.service}
                        </div>
                        <div class="event-time">Created: ${ticket.created.toLocaleString()}</div>
                    </div>
                    <div class="event-description">
                        <strong>Status:</strong> ${ticket.status}<br>
                        <strong>Description:</strong> ${ticket.description}<br>
                        <button class="btn btn-success" onclick="closeTicket('${ticket.id}')">Close Ticket</button>
                    </div>
                `;
                ticketsContainer.appendChild(ticketElement);
            });
        }

        function loadNotifications() {
            const notificationsContainer = document.getElementById('emailPreview');
            notificationsContainer.innerHTML = `
                <div class="email-preview">
                    <div class="email-header">
                        <div class="email-field"><strong>From:</strong> cloudops@yourcompany.com</div>
                        <div class="email-field"><strong>To:</strong> stakeholders@yourcompany.com</div>
                        <div class="email-field"><strong>Subject:</strong> URGENT: Upcoming Maintenance - AWS EC2</div>
                        <div class="email-field"><strong>Date:</strong> ${new Date().toLocaleString()}</div>
                    </div>
                    <div class="email-body">
                        <p><strong>Dear Team,</strong></p>
                        <p>This is an urgent notification regarding upcoming scheduled maintenance that may impact our services.</p>
                        <p><strong>MAINTENANCE DETAILS:</strong></p>
                        <ul>
                            <li>Provider: AWS</li>
                            <li>Service: EC2</li>
                            <li>Description: Scheduled maintenance for EC2 instances in us-east-1</li>
                            <li>Start Time: ${sampleEvents[0].startTime.toLocaleString()}</li>
                            <li>End Time: ${sampleEvents[0].endTime.toLocaleString()}</li>
                            <li>Region: us-east-1</li>
                        </ul>
                        <p><strong>CHANGE TICKET:</strong> CHG0001234</p>
                        <p><strong>CURRENT CONNECTIVITY STATUS:</strong></p>
                        <ul>
                            <li>AWS Direct Connect VIF (dxvif-123): Status UP, BGP UP</li>
                            <li>AWS Direct Connect VIF (dxvif-456): Status UP, BGP UP</li>
                        </ul>
                        <p>Please monitor your applications during the maintenance window.</p>
                        <p><strong>Best regards,<br>Cloud Operations Team</strong></p>
                    </div>
                </div>
            `;
        }

        function loadLogs() {
            const logContainer = document.getElementById('logContainer');
            if (systemLogs.length === 0) {
                generateSampleLogs();
            }
            logContainer.innerHTML = systemLogs.join('<br>');
        }

        function generateSampleLogs() {
            const now = new Date();
            systemLogs = [
                `<span class="timestamp">[${now.toISOString()}]</span> <span class="log-info">INFO</span> - Starting Cloud Maintenance Automation System...`,
                `<span class="timestamp">[${new Date(now.getTime() - 60000).toISOString()}]</span> <span class="log-info">INFO</span> - Checking AWS Health API for maintenance events...`,
                `<span class="timestamp">[${new Date(now.getTime() - 50000).toISOString()}]</span> <span class="log-info">INFO</span> - Found 1 AWS maintenance event: aws-001`,
                `<span class="timestamp">[${new Date(now.getTime() - 40000).toISOString()}]</span> <span class="log-info">INFO</span> - Creating ServiceNow ticket for event aws-001...`,
                `<span class="timestamp">[${new Date(now.getTime() - 30000).toISOString()}]</span> <span class="log-info">INFO</span> - Created ticket CHG0001234 for event aws-001`,
                `<span class="timestamp">[${new Date(now.getTime() - 20000).toISOString()}]</span> <span class="log-info">INFO</span> - Checking connectivity status...`,
                `<span class="timestamp">[${new Date(now.getTime() - 15000).toISOString()}]</span> <span class="log-info">INFO</span> - AWS DX VIF dxvif-123: Status available, BGP up`,
                `<span class="timestamp">[${new Date(now.getTime() - 10000).toISOString()}]</span> <span class="log-info">INFO</span> - Sending pre-maintenance notification email...`,
                `<span class="timestamp">[${new Date(now.getTime() - 5000).toISOString()}]</span> <span class="log-info">INFO</span> - Pre-maintenance notification sent for ticket CHG0001234`,
                `<span class="timestamp">[${now.toISOString()}]</span> <span class="log-info">INFO</span> - System check completed successfully`
            ];
        }

        function runSystemCheck() {
            addLog('INFO', 'Running system check...');
            setTimeout(() => {
                addLog('INFO', 'AWS Health API: Connected');
                addLog('INFO', 'GCP Operations Suite: Connected');
                addLog('INFO', 'Azure Service Health: Connected');
                addLog('INFO', 'ServiceNow API: Connected');
                addLog('INFO', 'Email SMTP: Connected');
                addLog('INFO', 'System check completed successfully');
            }, 1000);
        }

        function generateReport() {
            addLog('INFO', 'Generating system status report...');
            setTimeout(() => {
                addLog('INFO', 'Report generated and saved to reports/status_report.html');
            }, 1500);
        }

        function simulateMaintenanceEvent() {
            const provider = document.getElementById('simProvider').value;
            const type = document.getElementById('simType').value;
            const service = document.getElementById('simService').value || 'Test Service';
            
            addLog('INFO', `Simulating ${provider.toUpperCase()} maintenance event...`);
            setTimeout(() => {
                addLog('INFO', `New maintenance event detected: ${provider}-sim-${Date.now()}`);
                addLog('INFO', `Service: ${service}, Type: ${type}`);
                addLog('INFO', `Creating change ticket...`);
                addLog('INFO', `Ticket CHG${Math.floor(Math.random() * 1000000)} created`);
                addLog('INFO', `Sending notification emails...`);
                addLog('INFO', `Simulation completed`);
                
                // Update counters
                document.getElementById('activeEvents').textContent = parseInt(document.getElementById('activeEvents').textContent) + 1;
                document.getElementById('openTickets').textContent = parseInt(document.getElementById('openTickets').textContent) + 1;
            }, 2000);
        }

        function simulateCompletion() {
            addLog('INFO', 'Simulating maintenance completion...');
            setTimeout(() => {
                addLog('INFO', 'Maintenance window ended');
                addLog('INFO', 'Closing change ticket...');
                addLog('INFO', 'Ticket closed successfully');
                addLog('INFO', 'Sending completion notification...');
                addLog('INFO', 'Completion notification sent');
                
                // Update counters
                const currentOpen = parseInt(document.getElementById('openTickets').textContent);
                if (currentOpen > 0) {
                    document.getElementById('openTickets').textContent = currentOpen - 1;
                }
            }, 2000);
        }

        function closeTicket(ticketId) {
            addLog('INFO', `Manually closing ticket ${ticketId}...`);
            setTimeout(() => {
                addLog('INFO', `Ticket ${ticketId} closed successfully`);
                loadTickets(); // Refresh the tickets view
            }, 1000);
        }

        function addLog(level, message) {
            const timestamp = new Date().toISOString();
            const logClass = level === 'INFO' ? 'log-info' : level === 'WARNING' ? 'log-warning' : 'log-error';
            const logEntry = `<span class="timestamp">[${timestamp}]</span> <span class="${logClass}">${level}</span> - ${message}`;
            
            systemLogs.push(logEntry);
            if (systemLogs.length > 50) {
                systemLogs.shift(); // Keep only last 50 log entries
            }
            
            const logContainer = document.getElementById('logContainer');
            if (logContainer) {
                logContainer.innerHTML = systemLogs.join('<br>');
